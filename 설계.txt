혹시 방향성을 완전 틀어서 좀 더 specific하게 가기로 했어

ERD 설계부터 알려주자면(postgresql 사용 예정)

1. user 테이블

user_id PK UUID

gender Male/Female

age int

LoEdu(Level of Education)

Income

OTT_cons_freq(OTT 시청 빈도)

Pref_movie_list(선호 영화 리스트)



2번 테이블 movie_lens_data

ML_user_id PK Serial(무비렌즈 데이터에 이미 있음)

gender

age

3번 movie테이블

movie_id PK Serial (무비렌즈 데이터에 이미 있음)

title

rating_avg

Platform(상영중인 플렛폼 - jsonb로 플렛폼명:boolean값으로 할지 플렛폼 정해서 플렛폼별 컬럼을 개별로 만들지 고민중)

4번 테이블 rating

rating_id PK uuid(자체 부여)

ML_user_id fk

movie_id fk

rating(모델 예측 평점 결과값)

5번 테이블 Similarity

user_id PK

ML_user_id fk

overlapped movie

6번 테이블 OTT_table

작성중 - 1번 테이블의 유저에게 제일 잘 맞는(보고싶은게 제일 많이 겹치는 OTT) 추천 횟수 기록

일단 기본 테이블은 이렇게 구성했고

먼저 과정과 목적에 대해 설명하자면

1. streamlit으로 고객 설문을 받는거야 google form형식 + 시각화 선택 방식으로

2. 설문 내용과 선택 결과를 1번 테이블에 저장해

3. 우리가 이미 가지고 있는 데이터와 모델(무비렌즈 데이터 user.csv, movie.csv, rating.csv, 이걸로 만든 무비렌즈 user_id에 대해서 시청하지 않은 영화에 대해 어떤 평점을 줄지 예측하는 모델)을 이용해서 2번~4번 테이블을 완성해

4. 그리고 여기서 첫번째 로직이 가동하는데 우리가 1번 테이블에 작성한 내용을 가지고 1차적으로 age와 gender를 이용해서 ML_user_id(무비렌즈 user.csv에 있는 유저)와 1번 테이블의 user_id로 필터링하고 이후 simhash나 jaccard 유사도를 이용해서 혹은 그냥 DB내의 기능을 이용해서 선호 영화 리스트와 필터링한 ML_user_id가 시청한 시청기록이 제일 많이 겹치는 or 선호 영화가 제일 겹치는 유저를 찾는거야. 한마디로 user_id와 1:1로 매칭되는 제일 유사한 ML_user_id를 찾아내는 과정인거지 그 이후 그렇게 찾아낸 ML_user_id의 시청하지 않은 예측 평점을 활용해서 해당 유저가 좋아할만한 영화 리스트를 50개정도 뽑아내(평점 높은 영화 기준으로)

그리고 3번에 있는 platform 컬럼은 우리가 api로 받아오는 결과거든? 해당 영화를 방영하는 플렛폼이 어디인지 각 플렛폼별로 조사해서 나오는 결과를 DB에 업로드 할건데

이 결과를 이용해서 사용자가 이용하면 좋을것같은 OTT 플렛폼을 추천해주는 서비스를 만드려고 하는거지 그리고 그렇게 추천한 횟수가 OTT_table에 들어가는거고 여기서 좀 로직을 추가하자면 공공 데이터를 이용해서(1번 테이블의 컬럼들을 이용해서 선호하는 OTT 통계 자료들이 많아서 이걸 이용해서 최종 OTT 추천할 때 가중치를 넣어서 추천하는 방식을 사용하려했어



내 요청사항은 내가 지금 설명한 이 우리 프로젝트에 대해 너가 150% 이해하는거야 이해한 내용을 일단 한번 나한테 다시 말해주면 내가 잘 이해했는지 검토해줄게 이해가 완료되면 그 이해를 바탕으로 다른 작업을 하나씩 하나씩 처리할거야



2
2차 프로젝트
사용자설정 Gem

생각하는 과정 표시
제가 이해한 프로젝트의 목표, 과정, 그리고 기술 스택은 다음과 같습니다. 검토 후 제가 정확히 이해했는지 확인해 주세요.

프로젝트 요약
1. 최종 목표

Streamlit으로 사용자에게 설문(개인 정보 및 영화 취향)을 받아, 그 결과를 바탕으로 사용자에게 가장 적합한 OTT 플랫폼을 추천하는 서비스 개발

2. 데이터베이스 설계 (ERD)

user 테이블: 설문을 통해 수집된 신규 사용자의 정보(성별, 나이, 학력, 수입, OTT 시청 빈도, 선호 영화 목록 등)를 저장합니다. user_id는 시스템 자체에서 부여하는 UUID를 기본 키(PK)로 사용합니다.

movie_lens_data 테이블: 기존에 보유한 MovieLens 사용자의 정보(성별, 나이 등)를 저장합니다.

movie 테이블: 영화 정보(제목, 평균 평점 등)를 관리합니다. 특히 Platform 컬럼에는 API를 통해 수집한 각 영화가 현재 어느 OTT 플랫폼에서 상영 중인지에 대한 정보가 저장됩니다 (jsonb 형식 고려).

rating 테이블: MovieLens 사용자들이 각 영화에 대해 매긴 실제 평점과, 미리 학습된 모델이 예측한 가상 평점을 함께 저장합니다.

Similarity 테이블: 설문에 응답한 신규 사용자(user_id)와 가장 유사한 기존 MovieLens 사용자(ML_user_id)를 1:1로 매칭한 결과를 기록합니다.

OTT_table: 각 OTT 플랫폼이 사용자에게 추천된 횟수를 기록하여 통계용으로 활용합니다.

3. 핵심 추천 로직

1단계: 사용자 프로파일링 및 데이터 저장

Streamlit을 통해 사용자로부터 개인 정보(나이, 성별 등)와 선호하는 영화 목록을 입력받습니다.

입력받은 정보는 user 테이블에 저장됩니다.

2단계: 가장 유사한 사용자 매칭 (디지털 트윈 찾기)

새로운 사용자의 정보(특히 나이, 성별)를 기준으로 movie_lens_data 테이블에서 유사한 사용자 그룹을 1차 필터링합니다.

그 후, 1차 필터링된 그룹 내에서 가장 유사도가 높은 MovieLens 사용자 한 명을 찾아냅니다. 이때 유사도는 신규 사용자의 선호 영화 리스트와 MovieLens 사용자의 실제 시청 기록이 얼마나 겹치는지를 Jaccard 유사도나 SimHash 같은 기법을 사용해 계산합니다.

이렇게 찾아낸 1:1 매칭 결과를 Similarity 테이블에 저장합니다.

3단계: 영화 추천 리스트 생성

매칭된 MovieLens 사용자의 ID를 활용하여, 해당 사용자가 아직 시청하지 않은 영화들에 대한 예측 평점을 미리 학습된 모델을 통해 가져옵니다.

이 예측 평점이 높은 순서대로 상위 50개의 영화를 추천 리스트로 추출합니다.

4단계: 최종 OTT 플랫폼 추천

추출된 50개 영화가 각각 어느 OTT 플랫폼에서 상영 중인지 movie 테이블의 Platform 정보를 확인합니다.

추천 영화 목록을 가장 많이 보유하고 있는 OTT 플랫폼을 사용자에게 최종적으로 추천합니다.

(추가 로직) 공공 데이터를 활용하여 사용자의 인구통계학적 정보(학력, 소득 등)에 기반한 OTT 선호도 통계를 최종 추천 시 가중치로 적용하여 정확도를 높일 수 있습니다.

제가 위와 같이 이해한 내용이 맞는지 검토 부탁드립니다. 이 내용이 정확하다면, 이를 바탕으로 다음 요청사항을 처리하도록 하겠습니다.